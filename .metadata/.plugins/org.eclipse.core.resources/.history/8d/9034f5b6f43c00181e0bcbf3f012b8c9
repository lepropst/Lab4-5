import javax.swing.*;
import java.awt.event.*;
import java.io.*;
public class Lab3 extends JFrame implements ActionListener {
	static final long serialVersionUID = 1;
	JLabel scramletLabel = new JLabel("Scramlet");
	JTextField scramletText = new JTextField(10);
	JButton unscrmbleButton = new JButton("Unscramble");
	JTextArea result = new JTextArea(20,40);
	JScrollPane scroller = new JScrollPane();
	RandomAccessFile indexFile = null;
	RandomAccessFile wordsFile = null;
	public Lab3() {
		setTitle("Scramlet Solver");
		setLayout(new java.awt.FlowLayout());
		setSize(500,430);
		setDefaultCloseOperation(DISPOSE_ON_CLOSE);
		add(scramletLabel);
		add(scramletText);
		add(unscrmbleButton); unscrmbleButton.addActionListener(this);
		scroller.getViewport().add(result);
		add(scroller);
	}
	public static void main(String[] args) {
		Lab3 display = new Lab3();
		display.setVisible(true);
	}
	void getFiles() {
		String indexName = getFileName("Index File");
		if (indexName == null) {
			result.setText("No index file chosen");
			return;
		}
		String wordsName = getFileName("Words File");
		if (wordsName == null) {
			result.setText("No words file chosen");
			return;
		}
		try {
			indexFile = new RandomAccessFile(indexName, "r");
		} catch (FileNotFoundException e) {
			result.setText("Index file not found");
			return;
		}
		try {
			wordsFile = new RandomAccessFile(wordsName, "r");
		} catch (FileNotFoundException e) {
			result.setText("Words file not found");
			return;
		}
	}
	String getFileName(String title) {
		JFileChooser fc = new JFileChooser();
		fc.setDialogTitle(title);
		int returnVal = fc.showOpenDialog(this);
		if (returnVal == JFileChooser.APPROVE_OPTION)
			return fc.getSelectedFile().getPath();
		else
			return null;
	}
	public void actionPerformed(ActionEvent evt) {
		result.setText(""); //clear TextArea
		if (indexFile == null || wordsFile == null)
			getFiles();
		try {
			unscramble();
		} catch (IOException e) {
			result.setText("I/O eror occurred");
		}
	}
	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * */
	void unscramble () throws IOException {
		perm("hello");
	}
	int binarySearch(int value, int[] items, int lower, int upper) {
		if (lower > upper)
			return -1;
		int mid = (lower + upper) / 2;
		if (items[mid] = value)
			return mid;
		else if (items[mid] < value)
			return binarySearch(value, items, lower, mid-1);
		else
			return binarySearch(value, items, mid+1, upper);
	}





	String[] perm(String s) {
		if (s.length() == 0) return null;
		String result[] = new String[s.length()];
		if (s.length() == 1)
			result[0] = s;
		else {
			int j = 0;
			for(int i=0; i<s.length(); i++) {
				char c = s.charAt(i);
				String temp = s.substring(0,i) + s.substring(i+1);
				String[] tempPerm = perm(temp);
				for(int k=0; k<tempPerm.length; k++) {
					result[j] = c + tempPerm[k];
					j++;
				}
			}
		}
		return result;
	}

}